package com.sdd.jborg.scripts.sudo;

import static com.sdd.jborg.scripts.Standard.*;

class Sudo2
	implements BorgScript
{
	private static class Attributes {
		private static String defaults = {"!lecture,tty_tickets,!fqdn"} as String[];
		private static String users = {} as String[];
		private static String groups = {"sysadmin"} as String[];
		private static boolean passwordless = false;
		private static boolean includeSudoersD = false;
		private static boolean agentForwarding = false;
		private static String commandAliases = {} as String[];
		private static String prefix = "/etc";

		public static String[] getDefaults()
		{
			return defaults;
		}

		public static Sudo setDefaults(final String ... defaults )
		{
			Sudo.defaults = defaults;
			return null;
		}

		public static String[] getUsers()
		{
			return users;
		}

		public static Sudo setUsers(final String ... users)
		{
			Sudo.users = users;
			return null;
		}

		public static String[] getGroups()
		{
			return groups;
		}

		public static Sudo setGroups(final String ... groups)
		{
			Sudo.groups = groups;
			return null;
		}

		public static boolean isPasswordless()
		{
			return passwordless;
		}

		public static Sudo setPasswordless(final boolean passwordless)
		{
			Sudo.passwordless = passwordless;
			return null;
		}

		public static boolean isIncludeSudoersD()
		{
			return includeSudoersD;
		}

		public static Sudo setIncludeSudoersD(final boolean includeSudoersD)
		{
			Sudo.includeSudoersD = includeSudoersD;
			return null;
		}

		public static boolean isAgentForwarding()
		{
			return agentForwarding;
		}

		public static Sudo setAgentForwarding(final boolean agentForwarding)
		{
			Sudo.agentForwarding = agentForwarding;
			return null;
		}

		public static String[] getCommandAliases()
		{
			return commandAliases;
		}

		public static Sudo setCommandAliases(final String[] commandAliases)
		{
			Sudo.commandAliases = commandAliases;
			return null;
		}

		public static String getPrefix()
		{
			return prefix;
		}

		public static Sudo setPrefix(final String prefix)
		{
			Sudo.prefix = prefix;
			return null;
		}
	}

	@Override
	public void included()
	{
		then(install("sudo"));

		then(template("${Attributes.prefix}/sudoers")
			.setTemplateBody("""
				#######################################################################
				# WARNING: This file automatically generated by Borg on $server.timestamp
				#          If you need to edit this file, do so in the Borg repository.
				#          Any change you make here WILL be overridden on assimilation.
				#######################################################################

				${Attributes.defaults.collect{ d -> "Defaults $d" }.join "\n"}
				${Attributes.agentForwarding ? "Defaults env_keep+=SSH_AUTH_SOCK" : ""}

				# User privilege specification
				root ALL=(ALL) ALL

				${Attributes.commandAliases.collect{ a -> "Cmnd_Alias $a" }.join "\n"}

				${Attributes.users.collect{ u -> "$u ALL=(ALL) ${Attributes.passwordless ? "NOPASSWD:" : ""} ALL"}.join "\n"}

				${Attributes.groups.collect{ g -> """
					# Members of the group $g may gain root privileges
					%$g ALL=(ALL) ${Attributes.passwordless ? "NOPASSWD:" : ""}ALL
					"""}.join "\n"}
				""")
			.setOwner("root")
			.setGroup("root")
			.setSudo(true)
			.setMode("0440"));
	}
}
