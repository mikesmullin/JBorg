package com.sdd.jborg.scripts.sudo;

import static com.sdd.jborg.scripts.Standard.*;
import static com.sdd.jborg.scripts.sudo.Sudo.Attributes.*;

public final class Sudo
	implements BorgScript
{
	public static class Attributes
	{
		private static String defaults[] = {"!lecture,tty_tickets,!fqdn"};
		private static String users[] = {};
		private static String groups[] = {"sysadmin"};
		public static boolean passwordless = false;
		public static boolean includeSudoersD = false;
		public static boolean agentForwarding = false;
		private static String commandAliases[] = {};
		public static String prefix = "/etc";

		public static String[] getDefaults()
		{
			return defaults;
		}

		public static void setDefaults(final String... defaults)
		{
			Attributes.defaults = defaults;
		}

		public static String[] getUsers()
		{
			return users;
		}

		public static void setUsers(final String... users)
		{
			Attributes.users = users;
		}

		public static String[] getGroups()
		{
			return groups;
		}

		public static void setGroups(final String... groups)
		{
			Attributes.groups = groups;
		}

		public static String[] getCommandAliases()
		{
			return commandAliases;
		}

		public static void setCommandAliases(final String[] commandAliases)
		{
			Attributes.commandAliases = commandAliases;
		}
	}

	@Override
	public void included()
	{
		then(install("sudo"));

		then(template(prefix + "/sudoers")
			.setTemplateBody(String.join("\n",
				"#######################################################################",
				"# WARNING: This file automatically generated by Borg on " + server.timestamp,
				"#          If you need to edit this file, do so in the Borg repository.",
				"#          Any change you make here WILL be overridden on assimilation.",
				"#######################################################################",
				"",
				mapConcat(getDefaults(), _default -> "Defaults " + _default + "\n"),
				(agentForwarding ? "Defaults env_keep+=SSH_AUTH_SOCK\n" : ""),
				"",
				"# User privilege specification",
				"root ALL=(ALL) ALL",
				"",
				mapConcat(getCommandAliases(), alias -> "Cmnd_Alias " + alias + "\n"),
				"",
				mapConcat(getUsers(), user ->
					user + " ALL=(ALL) " + (passwordless ? "NOPASSWD:" : "") + "ALL\n"),
				"",
				mapConcat(getGroups(), group ->
					"# Members of the group " + group + " may gain root privileges\n" +
						"%" + group + " ALL=(ALL) " + (passwordless ? "NOPASSWD:" : "") + "ALL\n")))
			.setOwner("root")
			.setGroup("root")
			.setSudo(true)
			.setMode("0440"));
	}
}
