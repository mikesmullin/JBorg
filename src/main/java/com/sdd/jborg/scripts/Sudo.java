package com.sdd.jborg.scripts;

import static com.sdd.jborg.scripts.Standard.*;

public final class Sudo
	implements Script
{
	@Override
	public void included()
	{
		then(install("sudo"));

		then(template(prefix + "/sudoers")
			.setTemplateBody(
				"#######################################################################\n" +
					"# WARNING: This file automatically generated by Borg on " + server.timestamp + "\n" +
					"#          If you need to edit this file, do so in the Borg repository.\n" +
					"#          Any change you make here WILL be overridden on assimilation.\n" +
					"#######################################################################\n" +
					"\n" +
					mapConcat(defaults, _default -> "Defaults " + _default + "\n") +
					(agentForwarding ? "Defaults env_keep+=SSH_AUTH_SOCK\n" : "") +
					"\n" +
					"# User privilege specification\n" +
					"root ALL=(ALL) ALL\n" +
					"\n" +
					mapConcat(commandAliases, alias -> "Cmnd_Alias " + alias + "\n") +
					"\n" +
					mapConcat(users, user ->
						user + " ALL=(ALL) " + (passwordless ? "NOPASSWD:" : "") + "ALL\n") +
					"\n" +
					mapConcat(groups, group ->
						"# Members of the group " + group + " may gain root privileges\n" +
							"%" + group + " ALL=(ALL) " + (passwordless ? "NOPASSWD:" : "") + "ALL\n"))
			.setOwner("root")
			.setGroup("root")
			.setSudo(true)
			.setMode("0440"));
	}

	private static String defaults[] = {"!lecture,tty_tickets,!fqdn"};
	private static String users[] = {};
	private static String groups[] = {"sysadmin"};
	private static boolean passwordless = false;
	private static boolean includeSudoersD = false;
	private static boolean agentForwarding = false;
	private static String commandAliases[] = {};
	private static String prefix = "/etc";

	public static String[] getDefaults()
	{
		return defaults;
	}

	public static Sudo setDefaults(final String ... defaults )
	{
		Sudo.defaults = defaults;
		return null;
	}

	public static String[] getUsers()
	{
		return users;
	}

	public static Sudo setUsers(final String ... users)
	{
		Sudo.users = users;
		return null;
	}

	public static String[] getGroups()
	{
		return groups;
	}

	public static Sudo setGroups(final String ... groups)
	{
		Sudo.groups = groups;
		return null;
	}

	public static boolean isPasswordless()
	{
		return passwordless;
	}

	public static Sudo setPasswordless(final boolean passwordless)
	{
		Sudo.passwordless = passwordless;
		return null;
	}

	public static boolean isIncludeSudoersD()
	{
		return includeSudoersD;
	}

	public static Sudo setIncludeSudoersD(final boolean includeSudoersD)
	{
		Sudo.includeSudoersD = includeSudoersD;
		return null;
	}

	public static boolean isAgentForwarding()
	{
		return agentForwarding;
	}

	public static Sudo setAgentForwarding(final boolean agentForwarding)
	{
		Sudo.agentForwarding = agentForwarding;
		return null;
	}

	public static String[] getCommandAliases()
	{
		return commandAliases;
	}

	public static Sudo setCommandAliases(final String[] commandAliases)
	{
		Sudo.commandAliases = commandAliases;
		return null;
	}

	public static String getPrefix()
	{
		return prefix;
	}

	public static Sudo setPrefix(final String prefix)
	{
		Sudo.prefix = prefix;
		return null;
	}
}
